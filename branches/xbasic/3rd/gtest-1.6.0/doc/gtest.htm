
 



 
 
 



 
 
 <!DOCTYPE html>
<html>
<head>
 <link rel="icon" type="image/vnd.microsoft.icon" href="http://www.gstatic.com/codesite/ph/images/phosting.ico">
 
 
 <link rel="canonical" href="http://code.google.com/p/googletest/wiki/V1_6_Primer" />
 
 <script type="text/javascript">
 
 
 
 
 var codesite_token = null;
 
 
 var CS_env = {"assetHostPath":"http://www.gstatic.com/codesite/ph","projectName":"googletest","projectHomeUrl":"/p/googletest","urlPrefix":"p","domainName":null,"relativeBaseUrl":"","profileUrl":null,"token":null,"assetVersionPath":"http://www.gstatic.com/codesite/ph/2215219717728297356","absoluteBaseUrl":"http://code.google.com","loggedInUserEmail":null};
 var _gaq = _gaq || [];
 _gaq.push(
 ['siteTracker._setAccount', 'UA-18071-1'],
 ['siteTracker._trackPageview']);
 
 _gaq.push(
 ['projectTracker._setAccount', 'UA-4068653-1'],
 ['projectTracker._trackPageview']);
 
 </script>
 
 
 <title>V1_6_Primer - 
 googletest -
 
 Getting started with Google C++ Testing Framework - 
 Google C++ Testing Framework - Google Project Hosting
 </title>
 <meta http-equiv="Content-Type" content="text/html; charset=UTF-8" >
 <meta http-equiv="X-UA-Compatible" content="IE=edge,chrome=1" >
 
 <meta name="ROBOTS" content="NOARCHIVE">
 
 <link type="text/css" rel="stylesheet" href="http://www.gstatic.com/codesite/ph/2215219717728297356/css/ph_core.css">
 
 <link type="text/css" rel="stylesheet" href="http://www.gstatic.com/codesite/ph/2215219717728297356/css/ph_detail.css" >
 
 
 
 <link type="application/atom+xml" rel="alternate" href="/feeds/p/googletest/svnchanges/basic?path=/wiki/V1_6_Primer.wiki">
 
 
<!--[if IE]>
 <link type="text/css" rel="stylesheet" href="http://www.gstatic.com/codesite/ph/2215219717728297356/css/d_ie.css" >
<![endif]-->
 <style type="text/css">
 .menuIcon.off { background: no-repeat url(http://www.gstatic.com/codesite/ph/images/dropdown_sprite.gif) 0 -42px }
 .menuIcon.on { background: no-repeat url(http://www.gstatic.com/codesite/ph/images/dropdown_sprite.gif) 0 -28px }
 .menuIcon.down { background: no-repeat url(http://www.gstatic.com/codesite/ph/images/dropdown_sprite.gif) 0 0; }
 
 
 #maincol {
 padding-top: 0;
 padding-bottom: 0;
 }

 </style>
</head>
<body class="t6">
<script type="text/javascript">
 (function() {
 var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
 ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
 (document.getElementsByTagName('head')[0] || document.getElementsByTagName('body')[0]).appendChild(ga);
 })();
</script>
<div class="headbg">
 <div id="gaia">
 

 <span>
 
 <a href="#" id="projects-dropdown" onclick="return false;"><u>My favorites</u> <small>&#9660;</small></a>
 | <a href="https://www.google.com/accounts/ServiceLogin?service=code&amp;ltmpl=phosting&amp;continue=http%3A%2F%2Fcode.google.com%2Fp%2Fgoogletest%2Fwiki%2FV1_6_Primer&amp;followup=http%3A%2F%2Fcode.google.com%2Fp%2Fgoogletest%2Fwiki%2FV1_6_Primer" onclick="_CS_click('/gb/ph/signin');"><u>Sign in</u></a>
 
 </span>

 </div>
 <div class="gbh" style="left: 0pt;"></div>
 <div class="gbh" style="right: 0pt;"></div>
 
 
 <div style="height: 1px"></div>
<!--[if lte IE 7]>
<div style="text-align:center;">
Your version of Internet Explorer is not supported. Try a browser that
contributes to open source, such as <a href="http://www.firefox.com">Firefox</a>,
<a href="http://www.google.com/chrome">Google Chrome</a>, or
<a href="http://code.google.com/chrome/chromeframe/">Google Chrome Frame</a>.
</div>
<![endif]-->




 <table style="padding:0px; margin: 0px 0px 10px 0px; width:100%" cellpadding="0" cellspacing="0">
 <tr style="height: 58px;">
 
 <td id="plogo">
 <a href="/p/googletest/">
 
 <img src="http://www.gstatic.com/codesite/ph/images/search-48.gif" alt="Logo">
 
 </a>
 </td>
 
 <td style="padding-left: 0.5em">
 
 <div id="pname">
 <a href="/p/googletest/">googletest</a>
 </div>
 
 <div id="psum">
 <a id="project_summary_link" href="/p/googletest/" >Google C++ Testing Framework</a>
 
 </div>
 
 
 </td>
 <td style="white-space:nowrap;text-align:right; vertical-align:bottom;">
 
 <form action="/hosting/search">
 <input size="30" name="q" value="" type="text">
 
 <input type="submit" name="projectsearch" value="Search projects" >
 </form>
 
 </tr>
 </table>

</div>

 
<div id="mt" class="gtb"> 
 <a href="/p/googletest/" class="tab ">Project&nbsp;Home</a>
 
 
 
 
 <a href="/p/googletest/downloads/list" class="tab ">Downloads</a>
 
 
 
 
 
 <a href="/p/googletest/w/list" class="tab active">Wiki</a>
 
 
 
 
 
 <a href="/p/googletest/issues/list"
 class="tab ">Issues</a>
 
 
 
 
 
 <a href="/p/googletest/source/checkout"
 class="tab ">Source</a>
 
 
 
 
 
 <div class=gtbc></div>
</div>
<table cellspacing="0" cellpadding="0" width="100%" align="center" border="0" class="st">
 <tr>
 
 
 
 <td class="subt">
 <div class="issueDetail">
<div class="isf">
 
 <span class="inIssueList"> 
 <span>Search</span>
 <form action="/p/googletest/w/list" method="GET" style="display:inline">
 <select id="can" name="can" >
 <option disabled="disabled">Search within:</option>
 
 <option value="1" >&nbsp;All wiki pages</option>
 <option value="3" >&nbsp;Featured pages</option>
 <option value="2" selected="selected">&nbsp;Current pages</option>
 
 
 <option value="4" >&nbsp;Deprecated pages</option>
 
 </select>
 <span>for</span>
 <span id="qq"><input type="text" size="38" id="searchq" name="q" value=""
 autocomplete="off" ></span>
 
 
 
 <input type="submit" value="Search" >
 </form>
 </span>

 
 
 
 
 
 
 

</div>
</div>

 </td>
 
 
 
 
 
 
 <td align="right" valign="top" class="bevel-right"></td>
 </tr>
</table>


<script type="text/javascript">
 var cancelBubble = false;
 function _go(url) { document.location = url; }
</script>
<div id="maincol"
 
>

 
<!-- IE -->







 <style type="text/css">
 .delcom { background: #e8e8e8 }
 .commentcontent {
 margin: 2em;
 padding: 0px 10px;
 width: 66em;
 }
 .artifactcomment {
 border-top: 3px solid #c3d9ff;
 }
 #commentform {
 border-top: 3px solid #c3d9ff;
 }
 </style>

<div id="wikipage">
<table>
 <tr>
 
 
 <td style="vertical-align:top; padding-left:5px">
 
 <div id="wikiheader">
 
 <span style="font-size:120%;font-weight:bold">V1_6_Primer</span>
 &nbsp;
 <div> 
 
 <i>Getting started with Google C++ Testing Framework</i>
 
 
 
 <div id="wikiauthor" style="float:right">
 Updated <span title="Mon Apr 18 14:45:17 2011">
 Apr 18, 2011</span>
 
 by <a style="white-space: nowrap" href="/u/@VBNWR1RSBxdEWgZ0/">zhanyong...@gmail.com</a>
 
 </div>
 </div>
 </div>
 
 <div id="wikicontent">
 <div class="vt" id="wikimaincol">
 <p><ul><li><a href="#Introduction:_Why_Google_C++_Testing_Framework?">Introduction: Why Google C++ Testing Framework?</a></li><li><a href="#Setting_up_a_New_Test_Project">Setting up a New Test Project</a></li><li><a href="#Basic_Concepts">Basic Concepts</a></li><li><a href="#Assertions">Assertions</a></li><ul><li><a href="#Basic_Assertions">Basic Assertions</a></li><li><a href="#Binary_Comparison">Binary Comparison</a></li><li><a href="#String_Comparison">String Comparison</a></li></ul><li><a href="#Simple_Tests">Simple Tests</a></li><li><a href="#Test_Fixtures:_Using_the_Same_Data_Configuration_for_Multiple_Te">Test Fixtures: Using the Same Data Configuration for Multiple Tests</a></li><li><a href="#Invoking_the_Tests">Invoking the Tests</a></li><li><a href="#Writing_the_main()_Function">Writing the main() Function</a></li><ul><li><a href="#Important_note_for_Visual_C++_users">Important note for Visual C++ users</a></li></ul><li><a href="#Where_to_Go_from_Here">Where to Go from Here</a></li><li><a href="#Known_Limitations">Known Limitations</a></li></ul> </p><h1><a name="Introduction:_Why_Google_C++_Testing_Framework?"></a>Introduction: Why Google C++ Testing Framework?<a href="#Introduction:_Why_Google_C++_Testing_Framework?" class="section_anchor"></a></h1><p><i>Google C++ Testing Framework</i> helps you write better C++ tests. </p><p>No matter whether you work on Linux, Windows, or a Mac, if you write C++ code, Google Test can help you. </p><p>So what makes a good test, and how does Google C++ Testing Framework fit in? We believe: <ol><li>Tests should be <i>independent</i> and <i>repeatable</i>. It&#x27;s a pain to debug a test that succeeds or fails as a result of other tests.  Google C++ Testing Framework isolates the tests by running each of them on a different object. When a test fails, Google C++ Testing Framework allows you to run it in isolation for quick debugging. </li><li>Tests should be well <i>organized</i> and reflect the structure of the tested code.  Google C++ Testing Framework groups related tests into test cases that can share data and subroutines. This common pattern is easy to recognize and makes tests easy to maintain. Such consistency is especially helpful when people switch projects and start to work on a new code base. </li><li>Tests should be <i>portable</i> and <i>reusable</i>. The open-source community has a lot of code that is platform-neutral, its tests should also be platform-neutral.  Google C++ Testing Framework works on different OSes, with different compilers (gcc, MSVC, and others), with or without exceptions, so Google C++ Testing Framework tests can easily work with a variety of configurations.  (Note that the current release only contains build scripts for Linux - we are actively working on scripts for other platforms.) </li><li>When tests fail, they should provide as much <i>information</i> about the problem as possible. Google C++ Testing Framework doesn&#x27;t stop at the first test failure. Instead, it only stops the current test and continues with the next. You can also set up tests that report non-fatal failures after which the current test continues. Thus, you can detect and fix multiple bugs in a single run-edit-compile cycle. </li><li>The testing framework should liberate test writers from housekeeping chores and let them focus on the test <i>content</i>.  Google C++ Testing Framework automatically keeps track of all tests defined, and doesn&#x27;t require the user to enumerate them in order to run them. </li><li>Tests should be <i>fast</i>. With Google C++ Testing Framework, you can reuse shared resources across tests and pay for the set-up/tear-down only once, without making tests depend on each other. </li></ol></p><p>Since Google C++ Testing Framework is based on the popular xUnit architecture, you&#x27;ll feel right at home if you&#x27;ve used JUnit or PyUnit before. If not, it will take you about 10 minutes to learn the basics and get started. So let&#x27;s go! </p><p><i>Note:</i> We sometimes refer to Google C++ Testing Framework informally as <i>Google Test</i>. </p><h1><a name="Setting_up_a_New_Test_Project"></a>Setting up a New Test Project<a href="#Setting_up_a_New_Test_Project" class="section_anchor"></a></h1><p>To write a test program using Google Test, you need to compile Google Test into a library and link your test with it.  We provide build files for some popular build systems: <tt>msvc/</tt> for Visual Studio, <tt>xcode/</tt> for Mac Xcode, <tt>make/</tt> for GNU make, <tt>codegear/</tt> for Borland C++ Builder, and the autotools script (deprecated) and <tt>CMakeLists.txt</tt> for CMake (recommended) in the Google Test root directory.  If your build system is not on this list, you can take a look at <tt>make/Makefile</tt> to learn how Google Test should be compiled (basically you want to compile <tt>src/gtest-all.cc</tt> with <tt>GTEST_ROOT</tt> and <tt>GTEST_ROOT/include</tt> in the header search path, where <tt>GTEST_ROOT</tt> is the Google Test root directory). </p><p>Once you are able to compile the Google Test library, you should create a project or build target for your test program.  Make sure you have <tt>GTEST_ROOT/include</tt> in the header search path so that the compiler can find <tt>&quot;gtest/gtest.h&quot;</tt> when compiling your test.  Set up your test project to link with the Google Test library (for example, in Visual Studio, this is done by adding a dependency on <tt>gtest.vcproj</tt>). </p><p>If you still have questions, take a look at how Google Test&#x27;s own tests are built and use them as examples. </p><h1><a name="Basic_Concepts"></a>Basic Concepts<a href="#Basic_Concepts" class="section_anchor"></a></h1><p>When using Google Test, you start by writing <i>assertions</i>, which are statements that check whether a condition is true. An assertion&#x27;s result can be <i>success</i>, <i>nonfatal failure</i>, or <i>fatal failure</i>. If a fatal failure occurs, it aborts the current function; otherwise the program continues normally. </p><p><i>Tests</i> use assertions to verify the tested code&#x27;s behavior. If a test crashes or has a failed assertion, then it <i>fails</i>; otherwise it <i>succeeds</i>. </p><p>A <i>test case</i> contains one or many tests. You should group your tests into test cases that reflect the structure of the tested code. When multiple tests in a test case need to share common objects and subroutines, you can put them into a <i>test fixture</i> class. </p><p>A <i>test program</i> can contain multiple test cases. </p><p>We&#x27;ll now explain how to write a test program, starting at the individual assertion level and building up to tests and test cases. </p><h1><a name="Assertions"></a>Assertions<a href="#Assertions" class="section_anchor"></a></h1><p>Google Test assertions are macros that resemble function calls. You test a class or function by making assertions about its behavior. When an assertion fails, Google Test prints the assertion&#x27;s source file and line number location, along with a failure message. You may also supply a custom failure message which will be appended to Google Test&#x27;s message. </p><p>The assertions come in pairs that test the same thing but have different effects on the current function. <tt>ASSERT_*</tt> versions generate fatal failures when they fail, and <strong>abort the current function</strong>. <tt>EXPECT_*</tt> versions generate nonfatal failures, which don&#x27;t abort the current function. Usually <tt>EXPECT_*</tt> are preferred, as they allow more than one failures to be reported in a test. However, you should use <tt>ASSERT_*</tt> if it doesn&#x27;t make sense to continue when the assertion in question fails. </p><p>Since a failed <tt>ASSERT_*</tt> returns from the current function immediately, possibly skipping clean-up code that comes after it, it may cause a space leak. Depending on the nature of the leak, it may or may not be worth fixing - so keep this in mind if you get a heap checker error in addition to assertion errors. </p><p>To provide a custom failure message, simply stream it into the macro using the <tt>&lt;&lt;</tt> operator, or a sequence of such operators. An example: </p><pre class="prettyprint">ASSERT_EQ(x.size(), y.size()) &lt;&lt; &quot;Vectors x and y are of unequal length&quot;;

for (int i = 0; i &lt; x.size(); ++i) {
  EXPECT_EQ(x[i], y[i]) &lt;&lt; &quot;Vectors x and y differ at index &quot; &lt;&lt; i;
}</pre><p>Anything that can be streamed to an <tt>ostream</tt> can be streamed to an assertion macro--in particular, C strings and <tt>string</tt> objects. If a wide string (<tt>wchar_t*</tt>, <tt>TCHAR*</tt> in <tt>UNICODE</tt> mode on Windows, or <tt>std::wstring</tt>) is streamed to an assertion, it will be translated to UTF-8 when printed. </p><h2><a name="Basic_Assertions"></a>Basic Assertions<a href="#Basic_Assertions" class="section_anchor"></a></h2><p>These assertions do basic true/false condition testing. <table class="wikitable"><tr><td style="border: 1px solid #ccc; padding: 5px;"> <strong>Fatal assertion</strong> </td><td style="border: 1px solid #ccc; padding: 5px;"> <strong>Nonfatal assertion</strong> </td><td style="border: 1px solid #ccc; padding: 5px;"> <strong>Verifies</strong> </td></tr> <tr><td style="border: 1px solid #ccc; padding: 5px;"> <tt>ASSERT_TRUE(</tt><i>condition</i><tt>)</tt>;  </td><td style="border: 1px solid #ccc; padding: 5px;"> <tt>EXPECT_TRUE(</tt><i>condition</i><tt>)</tt>;   </td><td style="border: 1px solid #ccc; padding: 5px;"> <i>condition</i> is true </td></tr> <tr><td style="border: 1px solid #ccc; padding: 5px;"> <tt>ASSERT_FALSE(</tt><i>condition</i><tt>)</tt>; </td><td style="border: 1px solid #ccc; padding: 5px;"> <tt>EXPECT_FALSE(</tt><i>condition</i><tt>)</tt>;  </td><td style="border: 1px solid #ccc; padding: 5px;"> <i>condition</i> is false </td></tr> </table></p><p>Remember, when they fail, <tt>ASSERT_*</tt> yields a fatal failure and returns from the current function, while <tt>EXPECT_*</tt> yields a nonfatal failure, allowing the function to continue running. In either case, an assertion failure means its containing test fails. </p><p><i>Availability</i>: Linux, Windows, Mac. </p><h2><a name="Binary_Comparison"></a>Binary Comparison<a href="#Binary_Comparison" class="section_anchor"></a></h2><p>This section describes assertions that compare two values. </p><p><table class="wikitable"><tr><td style="border: 1px solid #ccc; padding: 5px;"> <strong>Fatal assertion</strong> </td><td style="border: 1px solid #ccc; padding: 5px;"> <strong>Nonfatal assertion</strong> </td><td style="border: 1px solid #ccc; padding: 5px;"> <strong>Verifies</strong> </td></tr> <tr><td style="border: 1px solid #ccc; padding: 5px;"><tt>ASSERT_EQ(</tt><i>expected</i><tt>, </tt><i>actual</i><tt>);</tt></td><td style="border: 1px solid #ccc; padding: 5px;"><tt>EXPECT_EQ(</tt><i>expected</i><tt>, </tt><i>actual</i><tt>);</tt></td><td style="border: 1px solid #ccc; padding: 5px;"> <i>expected</i> <tt>==</tt> <i>actual</i> </td></tr> <tr><td style="border: 1px solid #ccc; padding: 5px;"><tt>ASSERT_NE(</tt><i>val1</i><tt>, </tt><i>val2</i><tt>);</tt>      </td><td style="border: 1px solid #ccc; padding: 5px;"><tt>EXPECT_NE(</tt><i>val1</i><tt>, </tt><i>val2</i><tt>);</tt>      </td><td style="border: 1px solid #ccc; padding: 5px;"> <i>val1</i> <tt>!=</tt> <i>val2</i> </td></tr> <tr><td style="border: 1px solid #ccc; padding: 5px;"><tt>ASSERT_LT(</tt><i>val1</i><tt>, </tt><i>val2</i><tt>);</tt>      </td><td style="border: 1px solid #ccc; padding: 5px;"><tt>EXPECT_LT(</tt><i>val1</i><tt>, </tt><i>val2</i><tt>);</tt>      </td><td style="border: 1px solid #ccc; padding: 5px;"> <i>val1</i> <tt>&lt;</tt> <i>val2</i> </td></tr> <tr><td style="border: 1px solid #ccc; padding: 5px;"><tt>ASSERT_LE(</tt><i>val1</i><tt>, </tt><i>val2</i><tt>);</tt>      </td><td style="border: 1px solid #ccc; padding: 5px;"><tt>EXPECT_LE(</tt><i>val1</i><tt>, </tt><i>val2</i><tt>);</tt>      </td><td style="border: 1px solid #ccc; padding: 5px;"> <i>val1</i> <tt>&lt;=</tt> <i>val2</i> </td></tr> <tr><td style="border: 1px solid #ccc; padding: 5px;"><tt>ASSERT_GT(</tt><i>val1</i><tt>, </tt><i>val2</i><tt>);</tt>      </td><td style="border: 1px solid #ccc; padding: 5px;"><tt>EXPECT_GT(</tt><i>val1</i><tt>, </tt><i>val2</i><tt>);</tt>      </td><td style="border: 1px solid #ccc; padding: 5px;"> <i>val1</i> <tt>&gt;</tt> <i>val2</i> </td></tr> <tr><td style="border: 1px solid #ccc; padding: 5px;"><tt>ASSERT_GE(</tt><i>val1</i><tt>, </tt><i>val2</i><tt>);</tt>      </td><td style="border: 1px solid #ccc; padding: 5px;"><tt>EXPECT_GE(</tt><i>val1</i><tt>, </tt><i>val2</i><tt>);</tt>      </td><td style="border: 1px solid #ccc; padding: 5px;"> <i>val1</i> <tt>&gt;=</tt> <i>val2</i> </td></tr> </table></p><p>In the event of a failure, Google Test prints both <i>val1</i> and <i>val2</i> . In <tt>ASSERT_EQ*</tt> and <tt>EXPECT_EQ*</tt> (and all other equality assertions we&#x27;ll introduce later), you should put the expression you want to test in the position of <i>actual</i>, and put its expected value in <i>expected</i>, as Google Test&#x27;s failure messages are optimized for this convention. </p><p>Value arguments must be comparable by the assertion&#x27;s comparison operator or you&#x27;ll get a compiler error.  We used to require the arguments to support the <tt>&lt;&lt;</tt> operator for streaming to an <tt>ostream</tt>, but it&#x27;s no longer necessary since v1.6.0 (if <tt>&lt;&lt;</tt> is supported, it will be called to print the arguments when the assertion fails; otherwise Google Test will attempt to print them in the best way it can. For more details and how to customize the printing of the arguments, see this Google Mock <a href="http://code.google.com/p/googlemock/wiki/CookBook#Teaching_Google_Mock_How_to_Print_Your_Values" rel="nofollow">recipe</a>.). </p><p>These assertions can work with a user-defined type, but only if you define the corresponding comparison operator (e.g. <tt>==</tt>, <tt>&lt;</tt>, etc).  If the corresponding operator is defined, prefer using the <tt>ASSERT_*()</tt> macros because they will print out not only the result of the comparison, but the two operands as well. </p><p>Arguments are always evaluated exactly once. Therefore, it&#x27;s OK for the arguments to have side effects. However, as with any ordinary C/C++ function, the arguments&#x27; evaluation order is undefined (i.e. the compiler is free to choose any order) and your code should not depend on any particular argument evaluation order. </p><p><tt>ASSERT_EQ()</tt> does pointer equality on pointers. If used on two C strings, it tests if they are in the same memory location, not if they have the same value. Therefore, if you want to compare C strings (e.g. <tt>const char*</tt>) by value, use <tt>ASSERT_STREQ()</tt> , which will be described later on. In particular, to assert that a C string is <tt>NULL</tt>, use <tt>ASSERT_STREQ(NULL, c_string)</tt> . However, to compare two <tt>string</tt> objects, you should use <tt>ASSERT_EQ</tt>. </p><p>Macros in this section work with both narrow and wide string objects (<tt>string</tt> and <tt>wstring</tt>). </p><p><i>Availability</i>: Linux, Windows, Mac. </p><h2><a name="String_Comparison"></a>String Comparison<a href="#String_Comparison" class="section_anchor"></a></h2><p>The assertions in this group compare two <strong>C strings</strong>. If you want to compare two <tt>string</tt> objects, use <tt>EXPECT_EQ</tt>, <tt>EXPECT_NE</tt>, and etc instead. </p><p><table class="wikitable"><tr><td style="border: 1px solid #ccc; padding: 5px;"> <strong>Fatal assertion</strong> </td><td style="border: 1px solid #ccc; padding: 5px;"> <strong>Nonfatal assertion</strong> </td><td style="border: 1px solid #ccc; padding: 5px;"> <strong>Verifies</strong> </td></tr> <tr><td style="border: 1px solid #ccc; padding: 5px;"> <tt>ASSERT_STREQ(</tt><i>expected_str</i><tt>, </tt><i>actual_str</i><tt>);</tt>    </td><td style="border: 1px solid #ccc; padding: 5px;"> <tt>EXPECT_STREQ(</tt><i>expected_str</i><tt>, </tt><i>actual_str</i><tt>);</tt>     </td><td style="border: 1px solid #ccc; padding: 5px;"> the two C strings have the same content </td></tr> <tr><td style="border: 1px solid #ccc; padding: 5px;"> <tt>ASSERT_STRNE(</tt><i>str1</i><tt>, </tt><i>str2</i><tt>);</tt>    </td><td style="border: 1px solid #ccc; padding: 5px;"> <tt>EXPECT_STRNE(</tt><i>str1</i><tt>, </tt><i>str2</i><tt>);</tt>     </td><td style="border: 1px solid #ccc; padding: 5px;"> the two C strings have different content </td></tr> <tr><td style="border: 1px solid #ccc; padding: 5px;"> <tt>ASSERT_STRCASEEQ(</tt><i>expected_str</i><tt>, </tt><i>actual_str</i><tt>);</tt></td><td style="border: 1px solid #ccc; padding: 5px;"> <tt>EXPECT_STRCASEEQ(</tt><i>expected_str</i><tt>, </tt><i>actual_str</i><tt>);</tt> </td><td style="border: 1px solid #ccc; padding: 5px;"> the two C strings have the same content, ignoring case </td></tr> <tr><td style="border: 1px solid #ccc; padding: 5px;"> <tt>ASSERT_STRCASENE(</tt><i>str1</i><tt>, </tt><i>str2</i><tt>);</tt></td><td style="border: 1px solid #ccc; padding: 5px;"> <tt>EXPECT_STRCASENE(</tt><i>str1</i><tt>, </tt><i>str2</i><tt>);</tt> </td><td style="border: 1px solid #ccc; padding: 5px;"> the two C strings have different content, ignoring case </td></tr> </table></p><p>Note that &quot;CASE&quot; in an assertion name means that case is ignored. </p><p><tt>*STREQ*</tt> and <tt>*STRNE*</tt> also accept wide C strings (<tt>wchar_t*</tt>). If a comparison of two wide strings fails, their values will be printed as UTF-8 narrow strings. </p><p>A <tt>NULL</tt> pointer and an empty string are considered <i>different</i>. </p><p><i>Availability</i>: Linux, Windows, Mac. </p><p>See also: For more string comparison tricks (substring, prefix, suffix, and regular expression matching, for example), see the <a href="/p/googletest/wiki/V1_6_AdvancedGuide">Advanced Google Test Guide</a>. </p><h1><a name="Simple_Tests"></a>Simple Tests<a href="#Simple_Tests" class="section_anchor"></a></h1><p>To create a test: <ol><li>Use the <tt>TEST()</tt> macro to define and name a test function, These are ordinary C++ functions that don&#x27;t return a value. </li><li>In this function, along with any valid C++ statements you want to include, use the various Google Test assertions to check values. </li><li>The test&#x27;s result is determined by the assertions; if any assertion in the test fails (either fatally or non-fatally), or if the test crashes, the entire test fails. Otherwise, it succeeds. </li></ol></p><pre class="prettyprint">TEST(test_case_name, test_name) {
 ... test body ...
}</pre><p><tt>TEST()</tt> arguments go from general to specific. The <i>first</i> argument is the name of the test case, and the <i>second</i> argument is the test&#x27;s name within the test case. Both names must be valid C++ identifiers, and they should not contain underscore (<tt>_</tt>). A test&#x27;s <i>full name</i> consists of its containing test case and its individual name. Tests from different test cases can have the same individual name. </p><p>For example, let&#x27;s take a simple integer function: </p><pre class="prettyprint">int Factorial(int n); // Returns the factorial of n</pre><p>A test case for this function might look like: </p><pre class="prettyprint">// Tests factorial of 0.
TEST(FactorialTest, HandlesZeroInput) {
  EXPECT_EQ(1, Factorial(0));
}

// Tests factorial of positive numbers.
TEST(FactorialTest, HandlesPositiveInput) {
  EXPECT_EQ(1, Factorial(1));
  EXPECT_EQ(2, Factorial(2));
  EXPECT_EQ(6, Factorial(3));
  EXPECT_EQ(40320, Factorial(8));
}</pre><p>Google Test groups the test results by test cases, so logically-related tests should be in the same test case; in other words, the first argument to their <tt>TEST()</tt> should be the same. In the above example, we have two tests, <tt>HandlesZeroInput</tt> and <tt>HandlesPositiveInput</tt>, that belong to the same test case <tt>FactorialTest</tt>. </p><p><i>Availability</i>: Linux, Windows, Mac. </p><h1><a name="Test_Fixtures:_Using_the_Same_Data_Configuration_for_Multiple_Te"></a>Test Fixtures: Using the Same Data Configuration for Multiple Tests<a href="#Test_Fixtures:_Using_the_Same_Data_Configuration_for_Multiple_Te" class="section_anchor"></a></h1><p>If you find yourself writing two or more tests that operate on similar data, you can use a <i>test fixture</i>. It allows you to reuse the same configuration of objects for several different tests. </p><p>To create a fixture, just: <ol><li>Derive a class from <tt>::testing::Test</tt> . Start its body with <tt>protected:</tt> or <tt>public:</tt> as we&#x27;ll want to access fixture members from sub-classes. </li><li>Inside the class, declare any objects you plan to use. </li><li>If necessary, write a default constructor or <tt>SetUp()</tt> function to prepare the objects for each test. A common mistake is to spell <tt>SetUp()</tt> as <tt>Setup()</tt> with a small <tt>u</tt> - don&#x27;t let that happen to you. </li><li>If necessary, write a destructor or <tt>TearDown()</tt> function to release any resources you allocated in <tt>SetUp()</tt> . To learn when you should use the constructor/destructor and when you should use <tt>SetUp()/TearDown()</tt>, read this <a href="http://code.google.com/p/googletest/wiki/V1_6_FAQ#Should_I_use_the_constructor/destructor_of_the_test_fixture_or_t" rel="nofollow">FAQ entry</a>. </li><li>If needed, define subroutines for your tests to share. </li></ol></p><p>When using a fixture, use <tt>TEST_F()</tt> instead of <tt>TEST()</tt> as it allows you to access objects and subroutines in the test fixture: </p><pre class="prettyprint">TEST_F(test_case_name, test_name) {
 ... test body ...
}</pre><p>Like <tt>TEST()</tt>, the first argument is the test case name, but for <tt>TEST_F()</tt> this must be the name of the test fixture class. You&#x27;ve probably guessed: <tt>_F</tt> is for fixture. </p><p>Unfortunately, the C++ macro system does not allow us to create a single macro that can handle both types of tests. Using the wrong macro causes a compiler error. </p><p>Also, you must first define a test fixture class before using it in a <tt>TEST_F()</tt>, or you&#x27;ll get the compiler error &quot;`virtual outside class declaration`&quot;. </p><p>For each test defined with <tt>TEST_F()</tt>, Google Test will: <ol><li>Create a <i>fresh</i> test fixture at runtime </li><li>Immediately initialize it via <tt>SetUp()</tt> , </li><li>Run the test </li><li>Clean up by calling <tt>TearDown()</tt> </li><li>Delete the test fixture.  Note that different tests in the same test case have different test fixture objects, and Google Test always deletes a test fixture before it creates the next one. Google Test does not reuse the same test fixture for multiple tests. Any changes one test makes to the fixture do not affect other tests. </li></ol></p><p>As an example, let&#x27;s write tests for a FIFO queue class named <tt>Queue</tt>, which has the following interface: </p><pre class="prettyprint">template &lt;typename E&gt; // E is the element type.
class Queue {
 public:
  Queue();
  void Enqueue(const E&amp; element);
  E* Dequeue(); // Returns NULL if the queue is empty.
  size_t size() const;
  ...
};</pre><p>First, define a fixture class. By convention, you should give it the name <tt>FooTest</tt> where <tt>Foo</tt> is the class being tested. </p><pre class="prettyprint">class QueueTest : public ::testing::Test {
 protected:
  virtual void SetUp() {
    q1_.Enqueue(1);
    q2_.Enqueue(2);
    q2_.Enqueue(3);
  }

  // virtual void TearDown() {}

  Queue&lt;int&gt; q0_;
  Queue&lt;int&gt; q1_;
  Queue&lt;int&gt; q2_;
};</pre><p>In this case, <tt>TearDown()</tt> is not needed since we don&#x27;t have to clean up after each test, other than what&#x27;s already done by the destructor. </p><p>Now we&#x27;ll write tests using <tt>TEST_F()</tt> and this fixture. </p><pre class="prettyprint">TEST_F(QueueTest, IsEmptyInitially) {
  EXPECT_EQ(0, q0_.size());
}

TEST_F(QueueTest, DequeueWorks) {
  int* n = q0_.Dequeue();
  EXPECT_EQ(NULL, n);

  n = q1_.Dequeue();
  ASSERT_TRUE(n != NULL);
  EXPECT_EQ(1, *n);
  EXPECT_EQ(0, q1_.size());
  delete n;

  n = q2_.Dequeue();
  ASSERT_TRUE(n != NULL);
  EXPECT_EQ(2, *n);
  EXPECT_EQ(1, q2_.size());
  delete n;
}</pre><p>The above uses both <tt>ASSERT_*</tt> and <tt>EXPECT_*</tt> assertions. The rule of thumb is to use <tt>EXPECT_*</tt> when you want the test to continue to reveal more errors after the assertion failure, and use <tt>ASSERT_*</tt> when continuing after failure doesn&#x27;t make sense. For example, the second assertion in the <tt>Dequeue</tt> test is <tt>ASSERT_TRUE(n != NULL)</tt>, as we need to dereference the pointer <tt>n</tt> later, which would lead to a segfault when <tt>n</tt> is <tt>NULL</tt>. </p><p>When these tests run, the following happens: <ol><li>Google Test constructs a <tt>QueueTest</tt> object (let&#x27;s call it <tt>t1</tt> ). </li><li><tt>t1.SetUp()</tt> initializes <tt>t1</tt> . </li><li>The first test ( <tt>IsEmptyInitially</tt> ) runs on <tt>t1</tt> . </li><li><tt>t1.TearDown()</tt> cleans up after the test finishes. </li><li><tt>t1</tt> is destructed. </li><li>The above steps are repeated on another <tt>QueueTest</tt> object, this time running the <tt>DequeueWorks</tt> test. </li></ol></p><p><i>Availability</i>: Linux, Windows, Mac. </p><p><i>Note</i>: Google Test automatically saves all <i>Google Test</i> flags when a test object is constructed, and restores them when it is destructed. </p><h1><a name="Invoking_the_Tests"></a>Invoking the Tests<a href="#Invoking_the_Tests" class="section_anchor"></a></h1><p><tt>TEST()</tt> and <tt>TEST_F()</tt> implicitly register their tests with Google Test. So, unlike with many other C++ testing frameworks, you don&#x27;t have to re-list all your defined tests in order to run them. </p><p>After defining your tests, you can run them with <tt>RUN_ALL_TESTS()</tt> , which returns <tt>0</tt> if all the tests are successful, or <tt>1</tt> otherwise. Note that <tt>RUN_ALL_TESTS()</tt> runs <i>all tests</i> in your link unit -- they can be from different test cases, or even different source files. </p><p>When invoked, the <tt>RUN_ALL_TESTS()</tt> macro: <ol><li>Saves the state of all  Google Test flags. </li><li>Creates a test fixture object for the first test. </li><li>Initializes it via <tt>SetUp()</tt>. </li><li>Runs the test on the fixture object. </li><li>Cleans up the fixture via <tt>TearDown()</tt>. </li><li>Deletes the fixture. </li><li>Restores the state of all Google Test flags. </li><li>Repeats the above steps for the next test, until all tests have run. </li></ol></p><p>In addition, if the text fixture&#x27;s constructor generates a fatal failure in step 2, there is no point for step 3 - 5 and they are thus skipped. Similarly, if step 3 generates a fatal failure, step 4 will be skipped. </p><p><i>Important</i>: You must not ignore the return value of <tt>RUN_ALL_TESTS()</tt>, or <tt>gcc</tt> will give you a compiler error. The rationale for this design is that the automated testing service determines whether a test has passed based on its exit code, not on its stdout/stderr output; thus your <tt>main()</tt> function must return the value of <tt>RUN_ALL_TESTS()</tt>. </p><p>Also, you should call <tt>RUN_ALL_TESTS()</tt> only <strong>once</strong>. Calling it more than once conflicts with some advanced Google Test features (e.g. thread-safe death tests) and thus is not supported. </p><p><i>Availability</i>: Linux, Windows, Mac. </p><h1><a name="Writing_the_main()_Function"></a>Writing the main() Function<a href="#Writing_the_main()_Function" class="section_anchor"></a></h1><p>You can start from this boilerplate: </p><pre class="prettyprint">#include &quot;this/package/foo.h&quot;
#include &quot;gtest/gtest.h&quot;

namespace {

// The fixture for testing class Foo.
class FooTest : public ::testing::Test {
 protected:
  // You can remove any or all of the following functions if its body
  // is empty.

  FooTest() {
    // You can do set-up work for each test here.
  }

  virtual ~FooTest() {
    // You can do clean-up work that doesn&#x27;t throw exceptions here.
  }

  // If the constructor and destructor are not enough for setting up
  // and cleaning up each test, you can define the following methods:

  virtual void SetUp() {
    // Code here will be called immediately after the constructor (right
    // before each test).
  }

  virtual void TearDown() {
    // Code here will be called immediately after each test (right
    // before the destructor).
  }

  // Objects declared here can be used by all tests in the test case for Foo.
};

// Tests that the Foo::Bar() method does Abc.
TEST_F(FooTest, MethodBarDoesAbc) {
  const string input_filepath = &quot;this/package/testdata/myinputfile.dat&quot;;
  const string output_filepath = &quot;this/package/testdata/myoutputfile.dat&quot;;
  Foo f;
  EXPECT_EQ(0, f.Bar(input_filepath, output_filepath));
}

// Tests that Foo does Xyz.
TEST_F(FooTest, DoesXyz) {
  // Exercises the Xyz feature of Foo.
}

}  // namespace

int main(int argc, char **argv) {
  ::testing::InitGoogleTest(&amp;argc, argv);
  return RUN_ALL_TESTS();
}</pre><p>The <tt>::testing::InitGoogleTest()</tt> function parses the command line for Google Test flags, and removes all recognized flags. This allows the user to control a test program&#x27;s behavior via various flags, which we&#x27;ll cover in <a href="/p/googletest/wiki/V1_6_AdvancedGuide">AdvancedGuide</a>. You must call this function before calling <tt>RUN_ALL_TESTS()</tt>, or the flags won&#x27;t be properly initialized. </p><p>On Windows, <tt>InitGoogleTest()</tt> also works with wide strings, so it can be used in programs compiled in <tt>UNICODE</tt> mode as well. </p><p>But maybe you think that writing all those main() functions is too much work? We agree with you completely and that&#x27;s why Google Test provides a basic implementation of main(). If it fits your needs, then just link your test with gtest_main library and you are good to go. </p><h2><a name="Important_note_for_Visual_C++_users"></a>Important note for Visual C++ users<a href="#Important_note_for_Visual_C++_users" class="section_anchor"></a></h2><p>If you put your tests into a library and your <tt>main()</tt> function is in a different library or in your .exe file, those tests will not run. The reason is a <a href="https://connect.microsoft.com/feedback/viewfeedback.aspx?FeedbackID=244410&amp;siteid=210" rel="nofollow">bug</a> in Visual C++. When you define your tests, Google Test creates certain static objects to register them. These objects are not referenced from elsewhere but their constructors are still supposed to run. When Visual C++ linker sees that nothing in the library is referenced from other places it throws the library out. You have to reference your library with tests from your main program to keep the linker from discarding it. Here is how to do it. Somewhere in your library code declare a function: </p><pre class="prettyprint">__declspec(dllexport) int PullInMyLibrary() { return 0; }</pre><p>If you put your tests in a static library (not DLL) then <tt>__declspec(dllexport)</tt> is not required. Now, in your main program, write a code that invokes that function: </p><pre class="prettyprint">int PullInMyLibrary();
static int dummy = PullInMyLibrary();</pre><p>This will keep your tests referenced and will make them register themselves at startup. </p><p>In addition, if you define your tests in a static library, add <tt>/OPT:NOREF</tt> to your main program linker options. If you use MSVC++ IDE, go to your .exe project properties/Configuration Properties/Linker/Optimization and set References setting to <tt>Keep Unreferenced Data (/OPT:NOREF)</tt>. This will keep Visual C++ linker from discarding individual symbols generated by your tests from the final executable. </p><p>There is one more pitfall, though. If you use Google Test as a static library (that&#x27;s how it is defined in gtest.vcproj) your tests must also reside in a static library. If you have to have them in a DLL, you <i>must</i> change Google Test to build into a DLL as well. Otherwise your tests will not run correctly or will not run at all. The general conclusion here is: make your life easier - do not write your tests in libraries!   </p><h1><a name="Where_to_Go_from_Here"></a>Where to Go from Here<a href="#Where_to_Go_from_Here" class="section_anchor"></a></h1><p>Congratulations! You&#x27;ve learned the Google Test basics. You can start writing and running Google Test tests, read some <a href="/p/googletest/wiki/V1_6_Samples">samples</a>, or continue with <a href="/p/googletest/wiki/V1_6_AdvancedGuide">AdvancedGuide</a>, which describes many more useful Google Test features. </p><h1><a name="Known_Limitations"></a>Known Limitations<a href="#Known_Limitations" class="section_anchor"></a></h1><p>Google Test is designed to be thread-safe.  The implementation is thread-safe on systems where the <tt>pthreads</tt> library is available.  It is currently <i>unsafe</i> to use Google Test assertions from two threads concurrently on other systems (e.g. Windows).  In most tests this is not an issue as usually the assertions are done in the main thread. If you want to help, you can volunteer to implement the necessary synchronization primitives in <tt>gtest-port.h</tt> for your platform. </p>
 </div>
 </div>
 </td><tr>
</table>
 </div>


 
 
 
 <form name="delcom" action="../w/delComment.do" method="POST">
 <input type="hidden" name="sequence_num" value="" >
 <input type="hidden" name="create_time" value="" >
 <input type="hidden" name="mode" value="" >
 <input type="hidden" name="pagename" value="V1_6_Primer" >
 <input type="hidden" name="token" value="" >
 </form>



 <script src="http://www.gstatic.com/codesite/ph/2215219717728297356/js/prettify/prettify.js"></script>
 <script type="text/javascript">
 prettyPrint();
 </script>

<script type="text/javascript" src="http://www.gstatic.com/codesite/ph/2215219717728297356/js/dit_scripts.js"></script>


<script type="text/javascript" src="https://apis.google.com/js/plusone.js">
</script>

  
 
 
 <script type="text/javascript" src="http://www.gstatic.com/codesite/ph/2215219717728297356/js/ph_core.js"></script>
 
 
 
 
 <script type="text/javascript" src="/js/codesite_product_dictionary_ph.pack.04102009.js"></script>
</div> 
<div id="footer" dir="ltr">
 <div class="text">
 &copy;2011 Google -
 <a href="/projecthosting/terms.html">Terms</a> -
 <a href="http://www.google.com/privacy.html">Privacy</a> -
 <a href="/p/support/">Project Hosting Help</a>
 </div>
</div>
 <div class="hostedBy" style="margin-top: -20px;">
 <span style="vertical-align: top;">Powered by <a href="http://code.google.com/projecthosting/">Google Project Hosting</a></span>
 </div>
 
 


 
 </body>
</html>


